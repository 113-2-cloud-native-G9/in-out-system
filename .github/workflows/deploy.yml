
name: Deploy to GCP Cloud Run


on:
  push:
    branches:
      - main  # 測試的時候再用backend-dev

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  BACKEND_SERVICE: ${{ secrets.BACKEND_SERVICE_NAME }}
  FRONTEND_SERVICE: ${{ secrets.FRONTEND_SERVICE_NAME }}
  REGION: ${{ secrets.GCP_REGION }}
  REPO: asia-east1-docker.pkg.dev

jobs:
  deploy-backend:
    name: Deploy Backend to Cloud Run
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout backend code
        uses: actions/checkout@v4
        with:
          ref: backend-dev

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker $REPO

      - name: Build and Push Docker Image
        run: |
          cd backend  
          docker build -t $REPO/$PROJECT_ID/in-out-system-docker-repo/$SERVICE:$GITHUB_SHA .
          docker push $REPO/$PROJECT_ID/in-out-system-docker-repo/$SERVICE:$GITHUB_SHA

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE \
            --image $REPO/$PROJECT_ID/in-out-system-docker-repo/$SERVICE:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --add-cloudsql-instances ${{ secrets.INSTANCE_CONNECTION_NAME }} \
            --set-env-vars INSTANCE_CONNECTION_NAME=${{ secrets.INSTANCE_CONNECTION_NAME }},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},DB_NAME=${{ secrets.DB_NAME }},JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \

      - name: Build and Push Backend Docker Image
        run: |
          cd backend
          docker build -t $REPO/$PROJECT_ID/in-out-system-docker-repo/$BACKEND_SERVICE:$GITHUB_SHA .
          docker push $REPO/$PROJECT_ID/in-out-system-docker-repo/$BACKEND_SERVICE:$GITHUB_SHA

      - name: Deploy Backend to Cloud Run
        run: |
          gcloud run deploy $BACKEND_SERVICE \
            --image $REPO/$PROJECT_ID/in-out-system-docker-repo/$BACKEND_SERVICE:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --min-instances 1 \
            --max-instances 10 \
            --cpu 1 \
            --memory 512Mi \
            --timeout 300s

  deploy-frontend:
    name: Deploy Frontend to Cloud Run
    runs-on: ubuntu-latest
    needs: deploy-backend  # 確保前端先在後端服務部署完成後再進行部署
    timeout-minutes: 15

    env:
      BACKEND_URL: ${{ needs.deploy-backend.outputs.backend-url }}

    steps:
      - name: Checkout frontend code
        uses: actions/checkout@v4
        with:
          ref: frontend-dev

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Update Frontend API URL in .env.production
        run: |
          echo "VITE_API_URL=${{ env.BACKEND_URL }}" > .env.production

      - name: Install dependencies
        run: npm ci

      - name: Build Frontend with Vite
        run: npm run build

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Build and Push Frontend Docker Image
        run: |
          cd frontend
          docker build -t $REPO/$PROJECT_ID/in-out-system-docker-repo/$FRONTEND_SERVICE:$GITHUB_SHA .
          docker push $REPO/$PROJECT_ID/in-out-system-docker-repo/$FRONTEND_SERVICE:$GITHUB_SHA

      - name: Deploy Frontend to Cloud Run
        run: |
          gcloud run deploy $FRONTEND_SERVICE \
            --image $REPO/$PROJECT_ID/in-out-system-docker-repo/$FRONTEND_SERVICE:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --timeout 300s

      - name: Get Frontend URL
        run: |
          URL=$(gcloud run services describe $FRONTEND_SERVICE --region $REGION --format 'value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "前端服務 URL: $URL"

